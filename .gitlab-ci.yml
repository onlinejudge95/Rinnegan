image: docker:stable

stages:
  - build
  - test

variables:
  IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}

build:database:
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE:database || true
  script:
    - docker build
      --cache-from $IMAGE:database
      --tag $IMAGE:database
      --file ./services/db/Dockerfile
      "./services/db"
  after_script:
    - docker push $IMAGE:database

build:serverdevelopment:
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE:serverdevelopment || true
  script:
    - docker build
      --cache-from $IMAGE:serverdevelopment
      --tag $IMAGE:serverdevelopment
      --file ./services/server/dev.Dockerfile
      "./services/server"
  after_script:
    - docker push $IMAGE:serverdevelopment

build:serverproduction:
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE:serverproduction || true
  script:
    - docker build
      --cache-from $IMAGE:serverproduction
      --tag $IMAGE:serverproduction
      --file ./services/server/prod.Dockerfile
      "./services/server"
  after_script:
    - docker push $IMAGE:serverproduction

test:server:
  stage: test
  image: $IMAGE:serverdevelopment
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    DATABASE_TEST_URL: postgresql://postgres:postgres@postgres:5432/test
    DATABASE_URL: postgresql://postgres:postgres@postgres:5432/test
    FLASK_ENV: testing
  script:
    - pytest -c /usr/src/app/app/tests/pytest.ini
