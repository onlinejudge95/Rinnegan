image: docker:stable

stages:
  - build
  - test
  - deploy-development
  - deploy-staging
  - deploy-production

variables:
  IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}

build:server:
  stage: build
  except:
    refs:
      - master
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE:server || true
  script:
    - docker build
      --cache-from $IMAGE:server
      --tag $IMAGE:server
      --file ./services/server/Dockerfile
      ./services/server
  after_script:
    - docker push $IMAGE:server

build:client:
  stage: build
  except:
    refs:
      - master
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    REACT_APP_USERS_SERVICE_URL: http://localhost:8001
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE:client || true
  script:
    - docker build
      --cache-from $IMAGE:client
      --tag $IMAGE:client
      --file ./services/client/Dockerfile
      ./services/client
  after_script:
    - docker push $IMAGE:client

test:server:
  stage: test
  except:
    refs:
      - master
  image: $IMAGE:server
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    DATABASE_TEST_URL: postgresql://postgres:postgres@postgres:5432/test
    DATABASE_URL: postgresql://postgres:postgres@postgres:5432/test
    FLASK_ENV: testing
    PORT: 5000
  before_script:
    - apk update
    - apk add bash curl
  script:
    - black --check --config /usr/src/app/pyproject.toml /usr/src/app
    - flake8 --config /usr/src/app/setup.cfg /usr/src/app
    - isort --atomic --case-sensitive --check-only --force-alphabetical-sort-within-sections --force-single-line-imports --lines-after-imports 2 --lines-between-types 1 --line-width 79 --recursive --skip-glob "migrations/*" /usr/src/app
    - pytest -c /usr/src/app/app/tests/pytest.ini
  after_script:
    - bash <(curl -s https://codecov.io/bash)

test:client:
  stage: test
  except:
    refs:
      - master
  image: $IMAGE:client
  before_script:
    - cd /usr/src/app
  script:
    - npm run prettier:check
    - npm run lint
    - npm run test

deploy-development:server:
  stage: deploy-development
  except:
    refs:
      - master
      - staging
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    HEROKU_APP_NAME: rinnegan-server-development
    HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
  before_script:
    - apk add --no-cache curl
    - chmod +x ./bin/deploy.sh
    - docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
    - docker pull $IMAGE:server || true
  script:
    - docker build
      --cache-from $IMAGE:server
      --tag $HEROKU_REGISTRY_IMAGE
      --file ./services/server/Dockerfile
      ./services/server
  after_script:
    - docker push $HEROKU_REGISTRY_IMAGE
    - ./bin/deploy.sh

deploy-development:client:
  stage: deploy-development
  except:
    refs:
      - master
      - staging
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    HEROKU_APP_NAME: rinnegan-client-development
    HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
  before_script:
    - apk add --no-cache curl
    - chmod +x ./bin/deploy.sh
    - docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
    - docker pull $IMAGE:client || true
  script:
    - docker build
      --cache-from $IMAGE:client
      --tag $HEROKU_REGISTRY_IMAGE
      --file ./services/client/Dockerfile
      ./services/client
  after_script:
    - docker push $HEROKU_REGISTRY_IMAGE
    - ./bin/deploy.sh

deploy-staging:server:
  stage: deploy-staging
  only:
    refs:
      - staging
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    HEROKU_APP_NAME: rinnegan-server-staging
    HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
  before_script:
    - apk add --no-cache curl
    - chmod +x ./bin/deploy.sh
    - docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
    - docker pull $IMAGE:server || true
  script:
    - docker build
      --cache-from $IMAGE:server
      --tag $HEROKU_REGISTRY_IMAGE
      --file ./services/server/Dockerfile
      ./services/server
  after_script:
    - docker push $HEROKU_REGISTRY_IMAGE
    - ./bin/deploy.sh

deploy-staging:client:
  stage: deploy-staging
  only:
    refs:
      - staging
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    HEROKU_APP_NAME: rinnegan-client-staging
    HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
  before_script:
    - apk add --no-cache curl
    - chmod +x ./bin/deploy.sh
    - docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
    - docker pull $IMAGE:client || true
  script:
    - docker build
      --cache-from $IMAGE:client
      --tag $HEROKU_REGISTRY_IMAGE
      --file ./services/client/Dockerfile
      ./services/client
  after_script:
    - docker push $HEROKU_REGISTRY_IMAGE
    - ./bin/deploy.sh

deploy-production:server:
  stage: deploy-production
  only:
    refs:
      - master
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    HEROKU_APP_NAME: rinnegan-server-production
    HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
  before_script:
    - apk add --no-cache curl
    - chmod +x ./bin/deploy.sh
    - docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
    - docker pull $IMAGE:server || true
  script:
    - docker build
      --cache-from $IMAGE:server
      --tag $HEROKU_REGISTRY_IMAGE
      --file ./services/server/Dockerfile
      ./services/server
  after_script:
    - docker push $HEROKU_REGISTRY_IMAGE
    - ./bin/deploy.sh

deploy-production:client:
  stage: deploy-production
  only:
    refs:
      - master
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    HEROKU_APP_NAME: rinnegan-client-production
    HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
  before_script:
    - apk add --no-cache curl
    - chmod +x ./bin/deploy.sh
    - docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
    - docker pull $IMAGE:client || true
  script:
    - docker build
      --cache-from $IMAGE:client
      --tag $HEROKU_REGISTRY_IMAGE
      --file ./services/client/Dockerfile
      ./services/client
  after_script:
    - docker push $HEROKU_REGISTRY_IMAGE
    - ./bin/deploy.sh
