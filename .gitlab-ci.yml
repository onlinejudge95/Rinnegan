image: docker:stable

stages:
  - build
  - test
  - deploy

variables:
  IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}

build:database:
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE:database || true
  script:
    - docker build
      --cache-from $IMAGE:database
      --tag $IMAGE:database
      --file ./services/db/Dockerfile
      ./services/db
  after_script:
    - docker push $IMAGE:database

build:serverdevelopment:
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE:serverdevelopment || true
  script:
    - docker build
      --cache-from $IMAGE:serverdevelopment
      --tag $IMAGE:serverdevelopment
      --file ./services/server/dev.Dockerfile
      ./services/server
  after_script:
    - docker push $IMAGE:serverdevelopment

build:serverproduction:
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE:serverproduction || true
  script:
    - docker build
      --cache-from $IMAGE:serverproduction
      --tag $IMAGE:serverproduction
      --file ./services/server/prod.Dockerfile
      ./services/server
  after_script:
    - docker push $IMAGE:serverproduction

test:server:
  stage: test
  image: $IMAGE:serverdevelopment
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    DATABASE_TEST_URL: postgresql://postgres:postgres@postgres:5432/test
    DATABASE_URL: postgresql://postgres:postgres@postgres:5432/test
    FLASK_ENV: testing
  script:
    - black --check --config /usr/src/app/pyproject.toml /usr/src/app
    - flake8 --config /usr/src/app/setup.cfg /usr/src/app
    - isort --atomic --case-sensitive --check-only --force-alphabetical-sort-within-sections --lines-after-imports 2 --lines-between-types 1 --recursive --force-single-line-imports --line-width 79 /usr/src/app
    - pytest -c /usr/src/app/app/tests/pytest.ini

deploy:serverstaging:
  stage: deploy
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    HEROKU_APP_NAME: rinnegan-staging
    HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
  before_script:
    - apk add --no-cache curl
    - docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
  script:
    - docker build
      --tag $HEROKU_REGISTRY_IMAGE
      --file ./services/server/prod.Dockerfile
      ./services/server
    - chmod +x deploy.sh
    - docker push $HEROKU_REGISTRY_IMAGE
  after_script:
    - deploy.sh
